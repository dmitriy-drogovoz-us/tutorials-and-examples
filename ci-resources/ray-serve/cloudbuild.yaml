# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
- id: "ray-serve: prepare tests"
  name: "gcr.io/cloud-builders/gcloud"
  entrypoint: "bash"
  args:
    - '-c'
    - |
      cp -r /workspace/ci-resources/ray-serve/tests /workspace/ray-serve/tests

- id: "ray-serve: validate platform"
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/ray-serve/terraform"
  script: |
    terraform init -no-color
    terraform validate -no-color
  waitFor: ["ray-serve: prepare tests"]

- id: 'ray-serve: create gke cluster'
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/ray-serve/terraform"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/ray_serve_gke_cluster_result.txt
    terraform apply \
    -var-file=default_env.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=default_resource_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=cluster_name=ml-ray-serve-$_BUILD_ID-cluster \
    -var=cluster_location=$_RAY_SERVE_REGION \
    -var=network_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_region=$_RAY_SERVE_REGION \
    -var=image_repository_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=iam_service_account_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=k8s_service_account_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -auto-approve -no-color
    echo "pass" > /workspace/ray_serve_gke_cluster_result.txt
  allowFailure: true
  waitFor: ['ray-serve: validate platform']

- id: 'ray-serve: generate kubeconfig'
  name: 'gcr.io/cloud-builders/gcloud'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - 'ml-ray-serve-${_BUILD_ID}-cluster'
  - '--region=${_RAY_SERVE_REGION}'
  - '--project=${PROJECT_ID}'
  allowFailure: true
  waitFor: ['ray-serve: create gke cluster']

- id: "ray-serve: install kuberay-operator"
  name: 'gcr.io/${PROJECT_ID}/cloud-builders-helm'
  args:
  - '-c'
  - |
    set -e
    echo "fail" > /workspace/ray_serve_install_kuberay-operator.txt
    echo "pass" > /workspace/ray_serve_install_kuberay-operator.txt
  allowFailure: true
  waitFor: ['ray-serve: generate kubeconfig']

- id: "ray-serve: build ray-serve-vllm"
  name: 'gcr.io/cloud-builders/gcloud'
  args:
  - '-c'
  - |
    set -e
    echo "fail" > /workspace/ray_serve_build_ray-serve-vllm.txt
    echo "pass" > /workspace/ray_serve_build_ray-serve-vllm.txt
  allowFailure: true
  waitFor: ['ray-serve: generate kubeconfig']

- id: "ray-serve: build adk_agent"
  name: 'gcr.io/cloud-builders/gcloud'
  args:
  - '-c'
  - |
    set -e
    echo "fail" > /workspace/ray_serve_build_adk_agent.txt
    echo "pass" > /workspace/ray_serve_build_adk_agent.txt
  allowFailure: true
  waitFor: ['ray-serve: generate kubeconfig']

- id: "ray-serve: test guide"
  name: "gcr.io/cloud-builders/kubectl"
  dir: "/workspace/ray-serve/ray-serve-vllm"
  secretEnv: ["HF_TOKEN"]
  env:
    - "CLOUDSDK_COMPUTE_ZONE=${_REGION}"
    - "CLOUDSDK_CONTAINER_CLUSTER=ml-${_BUILD_ID}-cluster"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e
    echo "fail" > /workspace/ray_serve_test_guide.txt

    kubectl create secret generic hf-secret \
      --from-literal=hf_api_token=$$HF_TOKEN \
      --dry-run=client -o yaml | kubectl apply -f -

    gcloud builds submit \
      --tag us-docker.pkg.dev/$PROJECT_ID/ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER/llama-ray-serve:latest \
      --project=$PROJECT_ID \
      .

    sed -i "s|image: us-docker.pkg.dev/<PROJECT-ID>/llama-ray/llama-ray-serve:latest|image: us-docker.pkg.dev/$PROJECT_ID/ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER/llama-ray-serve:latest|g" ray-service.yaml
    sed -i "s|serviceAccount: adk-ray-agent-sa|serviceAccount: ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa" ray-service.yaml
    kubectl apply -f ray-service.yaml
    kubectl get rayservice llama-31-8b -o yaml
    sleep 30s
    kubectl wait --for=jsonpath='.status.state'=ready raycluster/$(kubectl get raycluster -o=jsonpath='{.items[0].metadata.name}') --timeout=1200s
    kubectl port-forward service/llama-31-8b-serve-svc 8000:8000 &
    city="New York"
    if bash ../tests/test_model.sh | grep -q -m 1 "$city"; then
      echo "SUCCESS: String '$city' found."
    else
      echo "ERROR: $city not found."
      exit 1
    fi

    cd ../adk_agent
    gcloud builds submit \
      --tag us-docker.pkg.dev/$PROJECT_ID/ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER/adk-agent:latest \
      --project=$PROJECT_ID \
      .
    sed -i "s|image: us-docker.pkg.dev/<PROJECT-ID>/llama-ray/adk-agent:latest|image: us-docker.pkg.dev/$PROJECT_ID/ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER/adk-agent:latest|g" example-agent/agent-deployment.yaml
    sed -i "s|serviceAccount: adk-ray-agent-sa|serviceAccount: ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa" ray-service.yaml
    sed -i "s|value: <PROJECT-ID>|value: $PROJECT_ID|g" example-agent/agent-deployment.yaml
    sed -i "s|value: <REGION>|value: $_RAY_SERVE_REGION|g" example-agent/agent-deployment.yaml
    kubectl apply -f ./example-agent/agent-deployment.yaml
    sleep 5s
    kubectl get pods
    kubectl get services
    sleep 5m
    external_ip=$(kubectl get service adk-agent -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    curl http://$external_ip:80/apps/example-agent/users/user1/sessions \
      -X POST \
      -H "Content-Type: application/json" \
      -d '{}'
    curl http://$external_ip:80/run \
      -X POST \
      -H "Content-Type: application/json" \
      -d '{
        "app_name": "example-agent",
        "user_id": "user1",
        "session_id": "836c4e74-5ee3-4bc8-96c2-94d77f079e34",
        "new_message": {
          "parts": [{"text": "What is the weather like in Seattle?"}],
          "role": "user"
        }
      }'

    echo "pass" > /workspace/ray_serve_test_guide.txt
  allowFailure: true
  waitFor: ['ray-serve: generate kubeconfig']

- id: 'ray-serve: cleanup gke cluster'
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/ray-serve/terraform"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/ray_serve_cleanup_gke_cluster.txt
    terraform destroy \
    -var-file=default_env.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=default_resource_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=cluster_name=ml-ray-serve-$_BUILD_ID-cluster \
    -var=cluster_location=$_RAY_SERVE_REGION \
    -var=network_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_region=$_RAY_SERVE_REGION \
    -var=image_repository_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=iam_service_account_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=k8s_service_account_name=ml-ray-serve-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -auto-approve -no-color
    echo "pass" > /workspace/ray_serve_cleanup_gke_cluster.txt
  allowFailure: true
  waitFor: ['ray-serve: test guide']

- id: 'check result'
  name: "ubuntu"
  entrypoint: 'bash'
  waitFor: ['ray-serve: cleanup gke cluster']
  args:
  - '-c'
  - |
    set -e

    echo "pass" > /workspace/check_result.txt

    if [[ $(cat /workspace/ray_serve_gke_cluster_result.txt) != "pass" ]]; then
      echo "adk vertex gke cluster creation failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/ray_serve_install_kuberay-operator.txt) != "pass" ]]; then
      echo "ray-serve install kuberay-operator failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/ray_serve_build_ray-serve-vllm.txt) != "pass" ]]; then
      echo "ray-serve build ray-serve-vllm failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/ray_serve_build_adk_agent.txt) != "pass" ]]; then
      echo "ray-serve build adk_agent failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/ray_serve_test_guide.txt) != "pass" ]]; then
      echo "adk vertex test guide failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/ray_serve_cleanup_gke_cluster.txt) != "pass" ]]; then
      echo "adk vertex gke cluster cleanup failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/check_result.txt) != "pass" ]]; then
      cat /workspace/check_result.txt
      exit 1
    fi

substitutions:
  _RAY_SERVE_REGION: us-central1
  _USER_NAME: github
  _AUTOPILOT_CLUSTER: "true"
  _BUILD_ID: ${BUILD_ID:0:8}
logsBucket: gs://ai-on-gke-qss-build-logs
options:
  substitutionOption: "ALLOW_LOOSE"
  machineType: "E2_HIGHCPU_8"
timeout: 5400s
availableSecrets:
  secretManager:
  - versionName: projects/ai-on-gke-qss/secrets/cloudbuild-hf-token/versions/latest
    env: "HF_TOKEN"
